---
jupytext:
  text_representation:
    extension: .md
    format_name: myst
    format_version: 0.12
    jupytext_version: 1.6.0
kernelspec:
  display_name: Python 3
  language: python
  name: python3
---

# Classes and objects

Python is an object oriented language. We briefly mentioned that objects are self-contained entities that bundle together data and functionality. We also discussed how we can have multiple copies of objects.

Pretty much everything in python is an object. It may not be obvious at this point why it is useful to have a language that works this way and, in fact, this is not something we will dwell upon because you will come across it from many different angles as we proceed and you'll become familiar with the concepts that way.

However, it is important to be able to recognise that certain things are objects and that objects are defined by a language construct called a `class` if only to be able to read the documentation and know what to expect.

Let's just look at a couple of examples - ways to bundle up some data easily:


```{pyodide}
#| runbutton: false
#| edit: false
#| include: true

class colour(object):

    rgb = (0.0, 0.0, 0.0)
    description = "Black"

...

c = colour()
d = colour()

```

The `colour` class is defined with two attributes: `rgb` and `description`. When we create instances of the `colour` class, we can access these attributes using dot notation:

```{pyodide}

print (c.description)
print (c.rgb)
print (d.description)
print (d.rgb)

c.rgb = (1.0,0.0,0.0)

print (c.description)
print (c.rgb)
print (d.description)
print (d.rgb)
```


`colour` can be thought of as a data container that standardises how we refer to colours. By default it is "Black" but we can always change the values. In the example above, we changed the `rgb` value but we did not update the description. Remember this for later !

Another thing, we can also do this:

```{python}
d.complement = (1.0, 1.0, 0.0)
print (d.complement)
```

But, does this do anything to the class itself ?
In other words, do you think the following will work or will it fail ?
If you are not sure, try it out in exercise 2.

```{python}

print (c.complement)
```

When we make an instance of a class (`c` or `d` are instances of the `colour` class), it is a new object in memory that can be modified quite extensively and this means it can fall out of sync with the class definition if we are not careful. Again, remember this for later !


::: {.callout-tip collapse=true icon="false"}

## Exercise 2

Try adding to the instance `d` and see how this changes other instances of the class such as `c`.

``` {pyodide}
#| exercise: ex_2
#| persist: true
class colour(object):

    rgb = (0.0, 0.0, 0.0)
    description = "Black"

______

d.complement = (1.0, 1.0, 0.0)
print (d.complement)

```

Does changing `d` affect `c` ?

``` {pyodide}
#| persist: true
print (c.complement)
```

:::

The `colour` class defines how objects will look once defined, but each 'instance' of the class (here `c` and `d`) lives a life of its own once built. This is even true if we re-define the class:


```{pyodide}
class colour(object):

    rgb = (0.0, 0.0, 0.0)
    description = "Black"
    complement  = (1.0, 1.0, 1.0)

e = colour()
print ("e.complement: ", e.complement)

print ("c.complement: ", c.complement)

```

Even though we re-define the class, the instances that have already been defined are not affected. Now here is something interesting:


```{pyodide}
print(type(e))
print(type(c))

print (type(e) == type(d))
```

The class definition is held on the object and, as a result, the objects that are defined from classes that have the same name do not have to have the same type. You can see that the `c` object is still a `colour` object, but so is `e` !


## Some better ways to build classes

The point of classes is to collect up data and the operations that we want to perform on that data and pass them around the program as a single object. We didn't really manage to do that yet, but we are nearly there.

The `rgb` value of the colour has a complement that can be calculated automatically, so we should just write a function to do that and bind it to the data. This eliminates the need to manually synchronise the data each time we assign a new colour, and that is a way to reduce the likelihood of making a mistake.

We define the new version of the class like this:

```{pyodide}
#| runbutton: false
#| edit: false
#| include: true

class colour2(object):
    """
    An rgb colour object with a description of the colour
    """

    def __init__(self, rgb = (0.0, 0.0, 0.0), description="Black"):

        self.rgb = rgb
        self.description = description

        return

    def complement(self):
        """
        Returns the complement of the RGB colour
        """
        return( 1.0 - self.rgb[0], 1.0 - self.rgb[1], 1.0 - self.rgb[2] )

new_c = colour2(rgb=(1.0, 0.0, 0.0), description="Red")
new_d = colour2(rgb=(0.0, 1.0, 0.0), description="Green")
```

```{pyodide}
print (new_c.rgb)
print (new_c.complement())

```

Here we have introduced the defaults as *arguments* that we can supply when we make an instance of the class. We also switched `complement` to be a function (a method of the class) which slightly changes how it is used.

`self` has a special meaning - it refers to the object "itself" and it is available within the object itself to set to the internal data or call the methods. This way to define the class also makes the `help` function more useful.

```{pyodide}
help(colour2)
```

Here is a slightly more elaborate version of the class. It has additional methods attached and each one of them has a *docstring* that describes in a line-or-two what the method does.

```{pyodide}
#| runbutton: false
#| edit: false
#| include: true

class colour3(object):
    """
    An rgb colour object with a description of the colour
    """

    def __init__(self, rgb = (0.0, 0.0, 0.0), description="Black"):

        self.rgb = rgb
        self.description = description

        return

    def complement(self):
      """
      Returns the complement of the RGB colour
      """
      return( 1.0 - self.rgb[0], 1.0 - self.rgb[1], 1.0 - self.rgb[2] )


    def mix(self, other):
      """
      Mixes two colours together by averaging their RGB values
      """
      if type(self) != type(other):
            print ("Cannot mix apples and oranges")
            return
      else:
            return ( 0.5*(self.rgb[0]+other.rgb[0]),
                     0.5*(self.rgb[1]+other.rgb[1]),
                     0.5*(self.rgb[2]+other.rgb[2]) )

    def mixmax(self, other):
      """
      Mixes two colours together by summing their RGB values (to a maximum of 1.0)
      """

      if type(self) != type(other):
          print ("Cannot mix apples and oranges")
          return
      else:
          return ( min(self.rgb[0]+other.rgb[0], 1.0),
                    min(self.rgb[1]+other.rgb[1], 1.0),
                    min(self.rgb[2]+other.rgb[2], 1.0) )

```

```{pyodide}
new_c = colour3(rgb=(1.0, 0.0, 0.0), description="Red")
new_d = colour3(rgb=(0.0, 1.0, 0.0), description="Green")

print (new_c.mix(new_d))
print (new_c.mixmax(new_d))
```

## More interesting classes

One of the extensibility secrets of python is that all the language operators are defined by special 'invisible' functions on the classes. That means we can define `+`, `-`, `*`, `/` etc for objects. Think of the way multiplication is defined differently for numbers versus matrices, for example. Here is how we might use **operator overloading** to refer to the different colour mixing methods:


```{pyodide}
#| runbutton: false
#| edit: false
#| include: true

class colour4(object):
    """
    An rgb colour object with a description of the colour
    """

    def __init__(self, rgb = (0.0, 0.0, 0.0), description="Black"):

        self.rgb = rgb
        self.description = description
        self.complement = ( 1.0 - rgb[0], 1.0 - rgb[1], 1.0-rgb[2] )

        return

    def _mix(self, other):
        if type(self) != type(other):
            print ("Cannot mix apples and oranges")
            return
        else:
            return ( 0.5*(self.rgb[0]+other.rgb[0]),
                     0.5*(self.rgb[1]+other.rgb[1]),
                     0.5*(self.rgb[2]+other.rgb[2]) )

    def _mixmax(self, other):
        if type(self) != type(other):
            print ("Cannot mix apples and oranges")
            return
        else:
            return ( min(self.rgb[0]+other.rgb[0], 1.0),
                     min(self.rgb[1]+other.rgb[1], 1.0),
                     min(self.rgb[2]+other.rgb[2], 1.0) )


    def __add__(self, other):

        return self._mix(other)


    def __mul__(self, other):

        return self._mixmax(other)
```


```{pyodide}
new_c = colour4(rgb=(1.0, 0.0, 0.0), description="Red")
new_d = colour4(rgb=(0.0, 1.0, 0.0), description="Green")

print (new_c._mix(new_d))
print (new_c + new_d)

print (new_c._mixmax(new_d))
print (new_c * new_d)
```

That's all we really need to know about classes to get started using them, but if you want to know more about that last example, you'll need to know about this page at the very least: [Object Model: numeric types](https://docs.python.org/2/reference/datamodel.html#emulating-numeric-types) from the python documentation. This is mostly advanced stuff, but if you find yourself being given a class description when you ask for help on something, this information will help you.
